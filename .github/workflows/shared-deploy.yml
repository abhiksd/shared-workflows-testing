name: Shared AKS Deployment Workflow
permissions:
  id-token: write
  contents: read
  actions: read
on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev, sqe, ppr, production)'
        required: true
        type: string
      application_name:
        description: 'Application name'
        required: true
        type: string
      application_type:
        description: 'Application type (java-springboot, nodejs)'
        required: true
        type: string
      build_context:
        description: 'Docker build context path'
        required: false
        type: string
        default: '.'
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      helm_chart_path:
        description: 'Path to Helm chart'
        required: false
        type: string
        default: 'helm'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false
    secrets: inherit

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  # AKS Cluster Configuration - Centralized and hardcoded for simplicity
  AKS_CLUSTER_NAME_DEV: "aks-cluster-dev"
  AKS_RESOURCE_GROUP_DEV: "rg-aks-dev"
  AKS_CLUSTER_NAME_SQE: "aks-cluster-sqe"
  AKS_RESOURCE_GROUP_SQE: "rg-aks-sqe"
  AKS_CLUSTER_NAME_PPR: "aks-cluster-ppr"
  AKS_RESOURCE_GROUP_PPR: "rg-aks-ppr"
  AKS_CLUSTER_NAME_PROD: "aks-cluster-prod"
  AKS_RESOURCE_GROUP_PROD: "rg-aks-prod"
  
jobs:
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      target_environment: ${{ steps.check.outputs.target_environment }}
      aks_cluster_name: ${{ steps.check.outputs.aks_cluster_name }}
      aks_resource_group: ${{ steps.check.outputs.aks_resource_group }}
    steps:
      - name: Validate environment and branch rules
        id: check
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          GITHUB_REF="${{ github.ref }}"
          EVENT_NAME="${{ github.event_name }}"
          
          echo "Checking deployment rules for environment: $ENVIRONMENT"
          echo "GitHub ref: $GITHUB_REF"
          echo "Event name: $EVENT_NAME"
          
          SHOULD_DEPLOY="false"
          TARGET_ENV=""
          AKS_CLUSTER=""
          AKS_RG=""
          
          # Auto-detect environment if 'auto' is specified
          if [[ "$ENVIRONMENT" == "auto" ]]; then
            if [[ "$GITHUB_REF" == "refs/heads/develop" ]]; then
              TARGET_ENV="dev"
            elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              TARGET_ENV="sqe"
            elif [[ "$GITHUB_REF" == "refs/heads/release/"* ]]; then
              TARGET_ENV="ppr"
            elif [[ "$GITHUB_REF" == "refs/tags/"* ]]; then
              TARGET_ENV="production"
            else
              echo "‚ùå Auto environment detection failed: unsupported branch $GITHUB_REF"
              TARGET_ENV="unknown"
            fi
            echo "üîç Auto-detected environment: $TARGET_ENV"
          else
            TARGET_ENV="$ENVIRONMENT"
            echo "üìù Using specified environment: $TARGET_ENV"
          fi
          
          # Validate deployment rules based on target environment
          case "$TARGET_ENV" in
            "dev")
              if [[ "$GITHUB_REF" == "refs/heads/develop" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_DEV }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_DEV }}"
                echo "‚úÖ Dev deployment approved: develop branch or manual trigger"
              else
                echo "‚ùå Dev deployment blocked: must be develop branch or manual trigger"
              fi
              ;;
            "sqe")
              if [[ "$GITHUB_REF" == "refs/heads/main" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_SQE }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_SQE }}"
                echo "‚úÖ SQE deployment approved: main branch or manual trigger"
              else
                echo "‚ùå SQE deployment blocked: must be main branch or manual trigger"
              fi
              ;;
            "ppr")
              if [[ "$GITHUB_REF" == "refs/heads/release/"* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_PPR }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_PPR }}"
                echo "‚úÖ PPR deployment approved: release branch or manual trigger"
              else
                echo "‚ùå PPR deployment blocked: must be release branch or manual trigger"
              fi
              ;;
            "production")
              if [[ "$GITHUB_REF" == "refs/tags/"* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_PROD }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_PROD }}"
                echo "‚úÖ Production deployment approved: tag or manual trigger"
              else
                echo "‚ùå Production deployment blocked: must be tag or manual trigger"
              fi
              ;;
            *)
              echo "‚ùå Invalid environment: $TARGET_ENV"
              ;;
          esac
          
          # Debug output
          echo "üìä Environment validation results:"
          echo "   - Should deploy: $SHOULD_DEPLOY"
          echo "   - Target environment: $TARGET_ENV"
          echo "   - AKS cluster name: $AKS_CLUSTER"
          echo "   - AKS resource group: $AKS_RG"
          
          # Validate that secrets are available for valid environments
          if [ "$TARGET_ENV" != "unknown" ] && [ "$TARGET_ENV" != "" ]; then
            if [ -z "$AKS_CLUSTER" ]; then
              echo "‚ùå ERROR: AKS cluster name is empty for environment $TARGET_ENV"
              echo "Check that AKS_CLUSTER_NAME_${TARGET_ENV^^} secret is set"
              if [ "$SHOULD_DEPLOY" == "true" ]; then
                exit 1
              fi
            fi
            if [ -z "$AKS_RG" ]; then
              echo "‚ùå ERROR: AKS resource group is empty for environment $TARGET_ENV"
              echo "Check that AKS_RESOURCE_GROUP_${TARGET_ENV^^} secret is set"
              if [ "$SHOULD_DEPLOY" == "true" ]; then
                exit 1
              fi
            fi
          fi

          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$AKS_CLUSTER" >> $GITHUB_OUTPUT
          echo "aks_resource_group=$AKS_RG" >> $GITHUB_OUTPUT
          echo "===================setting output values =============================="
          cat $GITHUB_OUTPUT 
          echo "Final decision: should_deploy=$SHOULD_DEPLOY, target_environment=$TARGET_ENV, aks_cluster_name=$AKS_CLUSTER, aks_resource_group=$AKS_RG"

  setup:
    runs-on: ubuntu-latest
    needs: validate-environment
    if: needs.validate-environment.outputs.should_deploy == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
      helm_version: ${{ steps.version.outputs.helm_version }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and tags
        id: version
        uses: ./.github/actions/version-strategy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}

      - name: Check for changes
        id: changes
        uses: ./.github/actions/check-changes
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          force_deploy: ${{ inputs.force_deploy }}

  maven-build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && inputs.application_type == 'java-springboot'
    outputs:
      jar_artifact: ${{ steps.maven.outputs.artifact_name }}
      build_version: ${{ steps.maven.outputs.build_version }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Java application with Maven
        id: maven
        uses: ./.github/actions/maven-build
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          java_version: '21'
          run_tests: 'false'
          upload_artifacts: 'true'

  sonar-scan:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && !failure() && !cancelled()
    outputs:
      scan_status: ${{ steps.check_enabled.outputs.scan_status || steps.sonar.outputs.scan_status }}
      quality_gate_status: ${{ steps.sonar.outputs.quality_gate_status }}
      coverage: ${{ steps.sonar.outputs.coverage }}
    steps:
      - name: Check if SonarQube is enabled
        id: check_enabled
        run: |
          SONAR_ENABLED="${{ vars.SONAR_ENABLED || 'true' }}"
          echo "üîç SonarQube enabled: $SONAR_ENABLED"
          
          if [[ "$SONAR_ENABLED" == "false" ]]; then
            echo "‚è≠Ô∏è SonarQube scanning is disabled - skipping"
            echo "scan_status=SKIPPED" >> $GITHUB_OUTPUT
            echo "enabled=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ SonarQube scanning is enabled - proceeding"
            echo "enabled=true" >> $GITHUB_OUTPUT
          fi

      - name: Clean workspace
        if: steps.check_enabled.outputs.enabled == 'true'
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        if: steps.check_enabled.outputs.enabled == 'true'
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: steps.check_enabled.outputs.enabled == 'true' && inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: SonarQube Scan
        if: steps.check_enabled.outputs.enabled == 'true'
        id: sonar
        uses: ./.github/actions/sonar-scan
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          sonar_enabled: ${{ vars.SONAR_ENABLED || 'true' }}
          sonar_host_url: ${{ vars.SONAR_HOST_URL }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          sonar_project_key: ${{ vars.SONAR_PROJECT_KEY || inputs.application_name }}
          sonar_coverage_threshold: ${{ vars.SONAR_COVERAGE_THRESHOLD || '80' }}
          sonar_reliability_rating: ${{ vars.SONAR_RELIABILITY_RATING || '1' }}
          sonar_security_rating: ${{ vars.SONAR_SECURITY_RATING || '1' }}
          sonar_maintainability_rating: ${{ vars.SONAR_MAINTAINABILITY_RATING || '2' }}

  checkmarx-scan:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && !failure() && !cancelled()
    outputs:
      scan_status: ${{ steps.check_enabled.outputs.scan_status || steps.checkmarx.outputs.scan_status }}
      overall_results: ${{ steps.checkmarx.outputs.overall_results }}
      scan_id: ${{ steps.checkmarx.outputs.scan_id }}
    steps:
      - name: Check if Checkmarx is enabled
        id: check_enabled
        run: |
          CHECKMARX_ENABLED="${{ vars.CHECKMARX_ENABLED || 'true' }}"
          echo "üîç Checkmarx enabled: $CHECKMARX_ENABLED"
          
          if [[ "$CHECKMARX_ENABLED" == "false" ]]; then
            echo "‚è≠Ô∏è Checkmarx scanning is disabled - skipping"
            echo "scan_status=SKIPPED" >> $GITHUB_OUTPUT
            echo "enabled=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Checkmarx scanning is enabled - proceeding"
            echo "enabled=true" >> $GITHUB_OUTPUT
          fi

      - name: Clean workspace
        if: steps.check_enabled.outputs.enabled == 'true'
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        if: steps.check_enabled.outputs.enabled == 'true'
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: steps.check_enabled.outputs.enabled == 'true' && inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: Checkmarx Scan
        if: steps.check_enabled.outputs.enabled == 'true'
        id: checkmarx
        uses: ./.github/actions/checkmarx-scan
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          checkmarx_enabled: ${{ vars.CHECKMARX_ENABLED || 'true' }}
          checkmarx_url: ${{ vars.CHECKMARX_URL }}
          cx_tenant: ${{ vars.CX_TENANT }}
          checkmarx_client_id: ${{ secrets.CHECKMARX_CLIENT_ID }}
          checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
          checkmarx_scan_types: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}
          checkmarx_sast_preset: ${{ vars.CHECKMARX_SAST_PRESET || 'Checkmarx Default' }}
          checkmarx_sca_resolver: ${{ vars.CHECKMARX_SCA_RESOLVER || 'auto' }}
          checkmarx_kics_platforms: ${{ vars.CHECKMARX_KICS_PLATFORMS || 'Docker,Kubernetes,Terraform' }}
          checkmarx_fail_build: ${{ vars.CHECKMARX_FAIL_BUILD || 'true' }}
          checkmarx_high_threshold: ${{ vars.CHECKMARX_HIGH_THRESHOLD || '0' }}
          checkmarx_medium_threshold: ${{ vars.CHECKMARX_MEDIUM_THRESHOLD || '5' }}
          checkmarx_low_threshold: ${{ vars.CHECKMARX_LOW_THRESHOLD || '10' }}

  build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build, sonar-scan, checkmarx-scan]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'SKIPPED') && (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'SKIPPED') && !failure() && !cancelled()
    steps:
      - name: Clean workspace and Docker
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'true'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build-push
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          dockerfile_path: ${{ inputs.dockerfile_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          registry: ${{ env.REGISTRY }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          jar_artifact_name: ${{ needs.maven-build.outputs.jar_artifact }}

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, sonar-scan, checkmarx-scan, build]
    
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'SKIPPED') && (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'SKIPPED') && !failure() && !cancelled()

    environment: ${{ needs.validate-environment.outputs.target_environment }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: üö® DEBUG - Check received outputs
        run: |
          echo "üîç What deploy job received from validate-environment:"
          echo "should_deploy: '${{ needs.validate-environment.outputs.should_deploy }}'"
          echo "target_environment: '${{ needs.validate-environment.outputs.target_environment }}'"
                      echo "aks_cluster_name: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
                      echo "aks_resource_group: '${{ needs.validate-environment.outputs.aks_resource_group }}'"
          echo ""
          echo "üîç Checking if values are null or empty:"
          if [ -z "${{ needs.validate-environment.outputs.aks_cluster_name }}" ]; then
            echo "‚ùå aks_cluster_name is NULL/EMPTY in deploy job"
          else
            echo "‚úÖ aks_cluster_name received: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
          fi
          
          if [ -z "${{ needs.validate-environment.outputs.aks_resource_group }}" ]; then
            echo "‚ùå aks_resource_group is NULL/EMPTY in deploy job"
          else
            echo "‚úÖ aks_resource_group received: '${{ needs.validate-environment.outputs.aks_resource_group }}'"
          fi

      - name: Deploy to AKS
        uses: ./.github/actions/helm-deploy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          helm_chart_path: ${{ inputs.helm_chart_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          helm_version: ${{ needs.setup.outputs.helm_version }}
          registry: ${{ env.REGISTRY }}
          aks_cluster_name: ${{ needs.validate-environment.outputs.aks_cluster_name }}
          aks_resource_group: ${{ needs.validate-environment.outputs.aks_resource_group }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases and tags
      id-token: write  # Required for OIDC authentication
    needs: [validate-environment, setup, build, deploy]
    outputs:
      release_url: ${{ steps.create_release.outputs.release_url }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
    # Only create releases for production and ppr deployments from appropriate branches or tags
    if: |
      needs.validate-environment.outputs.should_deploy == 'true' && 
      needs.setup.outputs.should_deploy == 'true' && 
      (needs.validate-environment.outputs.target_environment == 'production' || needs.validate-environment.outputs.target_environment == 'ppr') && 
      (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/')) &&
      !failure() && !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for release notes

      - name: Validate release parameters
        run: |
          echo "üîç Validating release creation parameters..."
          echo "========================================================"
          echo "   - Application: ${{ inputs.application_name }}"
          echo "   - Version: ${{ needs.setup.outputs.version }}"
          echo "   - Environment: ${{ needs.validate-environment.outputs.target_environment }}"
          echo "   - Branch/Tag: ${{ github.ref }}"
          echo "   - Event: ${{ github.event_name }}"
          echo ""
          
          # Validate required parameters
          if [ -z "${{ needs.setup.outputs.version }}" ]; then
            echo "‚ùå Error: Version is empty"
            exit 1
          fi
          
          if [ -z "${{ inputs.application_name }}" ]; then
            echo "‚ùå Error: Application name is empty"
            exit 1
          fi
          
          echo "‚úÖ All release parameters validated successfully"

      - name: Create GitHub Release
        id: create_release
        uses: ./.github/actions/create-release
        with:
          version: ${{ needs.setup.outputs.version }}
          application_name: ${{ inputs.application_name }}

      - name: Release summary
        run: |
          echo "üéâ Release created successfully!"
          echo "========================================================"
          echo "   - Release URL: ${{ steps.create_release.outputs.release_url }}"
          echo "   - Tag: ${{ steps.create_release.outputs.tag_name }}"
          echo "   - Application: ${{ inputs.application_name }}"
          echo "   - Version: ${{ needs.setup.outputs.version }}"

  # deploy-monitoring: REMOVED - Should be separate workflow triggered only by monitoring changes
  # Monitoring deployments should be independent of application deployments
  # Use manual dispatch or separate monitoring-specific workflow instead

  # cleanup:
  #   runs-on: ubuntu-latest
  #   #needs: [validate-environment, setup, maven-build, sonar-scan, checkmarx-scan, build, deploy, create_release]
  #   needs: [validate-environment, setup, maven-build, build, deploy, create_release]
  #   if: always() && needs.validate-environment.outputs.should_deploy == 'true'
  #   steps:
  #     - name: Final comprehensive cleanup
  #       uses: ./.github/actions/workspace-cleanup
  #       with:
  #         cleanup_docker: 'true'
  #         cleanup_temp: 'true'
